{
  "session_id": "session_20251001_195212_6e18b0b0",
  "specification": "sort an array backwards, like from biggest to smallest",
  "overall_status": "success",
  "pseudocode_success": true,
  "pseudocode_raw_output": {
    "functions": [
      {
        "name": "sort_array_descending",
        "description": "Sorts an array in descending order",
        "signature": "void sort_array_descending(int* arr, int size)",
        "input_parameters": [
          {
            "name": "arr",
            "data_type": "int*",
            "description": "The array to be sorted",
            "is_pointer": false,
            "is_array": false,
            "is_const": false
          },
          {
            "name": "size",
            "data_type": "int",
            "description": "The size of the array",
            "is_pointer": false,
            "is_array": false,
            "is_const": false
          }
        ],
        "output_parameters": [],
        "return_values": [],
        "return_type": "void",
        "preconditions": [
          "arr != NULL",
          "size > 0"
        ],
        "edge_cases": [
          "Empty array",
          "NULL pointer",
          "Single element"
        ],
        "complexity": "O(n^2)",
        "memory_usage": "O(1)",
        "body": "For each element in the array, compare it with every other element. If the current element is smaller than the compared element, swap them.",
        "dependencies": []
      }
    ],
    "structs": [],
    "enums": [],
    "global_variables": [],
    "includes": [
      "stdio.h"
    ],
    "dependencies": [],
    "metadata": {}
  },
  "pseudocode_error": null,
  "functions_created": [
    "sort_array_descending"
  ],
  "function_results": [
    {
      "function_name": "sort_array_descending",
      "function_signature": "void sort_array_descending(int* arr, int size)",
      "function_description": "Sorts an array in descending order",
      "pseudocode": {
        "name": "sort_array_descending",
        "description": "Sorts an array in descending order",
        "signature": "void sort_array_descending(int* arr, int size)",
        "input_parameters": [
          {
            "name": "arr",
            "data_type": "int*",
            "description": "The array to be sorted",
            "is_pointer": false,
            "is_array": false,
            "is_const": false
          },
          {
            "name": "size",
            "data_type": "int",
            "description": "The size of the array",
            "is_pointer": false,
            "is_array": false,
            "is_const": false
          }
        ],
        "output_parameters": [],
        "return_values": [],
        "return_type": "void",
        "preconditions": [
          "arr != NULL",
          "size > 0"
        ],
        "edge_cases": [
          "Empty array",
          "NULL pointer",
          "Single element"
        ],
        "complexity": "O(n^2)",
        "memory_usage": "O(1)",
        "body": "For each element in the array, compare it with every other element. If the current element is smaller than the compared element, swap them.",
        "dependencies": []
      },
      "postconditions": [
        {
          "formal_text": "∀i,j: 0 ≤ i < j < size → arr[i] ≥ arr[j]",
          "natural_language": "Array is sorted in non-increasing order",
          "strength": "standard",
          "category": "correctness",
          "precise_translation": "For every pair of indices i and j where i comes before j, the element at position i is greater than or equal to the element at position j",
          "reasoning": "This ensures the fundamental sorting property holds for all adjacent and non-adjacent pairs, preventing any out-of-order elements",
          "edge_cases": [
            "empty array",
            "single element",
            "duplicates"
          ],
          "edge_cases_covered": [
            "Empty array (size=0): vacuously true",
            "Single element (size=1): no pairs to compare",
            "Duplicates: arr[i] = arr[j] handled correctly"
          ],
          "coverage_gaps": [
            "Does not specify stability of sort"
          ],
          "confidence_score": 0.95,
          "clarity_score": 0.95,
          "completeness_score": 0.9,
          "testability_score": 0.88,
          "robustness_score": 0.92,
          "mathematical_quality_score": 0.93,
          "overall_priority_score": 0.9259999999999999,
          "mathematical_validity": "Mathematically sound - proper universal quantification over valid index range",
          "organization_rank": 0,
          "importance_category": "critical_correctness",
          "selection_reasoning": "Primary property defining what it means to be sorted",
          "robustness_assessment": "Highly robust - covers all orderings and edge cases",
          "is_primary_in_category": false,
          "recommended_for_selection": true,
          "z3_theory": "arrays",
          "warnings": []
        },
        {
          "formal_text": "arr ≠ NULL",
          "natural_language": "Array pointer is not NULL",
          "strength": "standard",
          "category": "correctness",
          "precise_translation": "The pointer to the array is not NULL",
          "reasoning": "This ensures that the function does not attempt to sort a non-existent array, which would lead to undefined behavior",
          "edge_cases": [
            "NULL pointer"
          ],
          "edge_cases_covered": [
            "NULL pointer: arr = NULL leads to undefined behavior"
          ],
          "coverage_gaps": [
            "Does not handle case where size is incorrect"
          ],
          "confidence_score": 0.99,
          "clarity_score": 0.99,
          "completeness_score": 0.99,
          "testability_score": 0.99,
          "robustness_score": 0.99,
          "mathematical_quality_score": 0.99,
          "overall_priority_score": 0.9899999999999999,
          "mathematical_validity": "Mathematically sound - proper nullity check",
          "organization_rank": 1,
          "importance_category": "error_handling",
          "selection_reasoning": "Prevents undefined behavior from null pointer dereference",
          "robustness_assessment": "Highly robust - prevents major error",
          "is_primary_in_category": false,
          "recommended_for_selection": true,
          "z3_theory": "arrays",
          "warnings": []
        },
        {
          "formal_text": "size ≥ 0",
          "natural_language": "Size of array is non-negative",
          "strength": "standard",
          "category": "correctness",
          "precise_translation": "The size of the array is greater than or equal to zero",
          "reasoning": "This ensures that the function does not attempt to sort an array with a negative size, which would lead to undefined behavior",
          "edge_cases": [
            "negative size"
          ],
          "edge_cases_covered": [
            "Negative size: size < 0 leads to undefined behavior"
          ],
          "coverage_gaps": [
            "Does not handle case where size is greater than actual array length"
          ],
          "confidence_score": 0.99,
          "clarity_score": 0.99,
          "completeness_score": 0.99,
          "testability_score": 0.99,
          "robustness_score": 0.99,
          "mathematical_quality_score": 0.99,
          "overall_priority_score": 0.9899999999999999,
          "mathematical_validity": "Mathematically sound - proper non-negativity check",
          "organization_rank": 2,
          "importance_category": "error_handling",
          "selection_reasoning": "Prevents undefined behavior from negative size",
          "robustness_assessment": "Highly robust - prevents major error",
          "is_primary_in_category": false,
          "recommended_for_selection": true,
          "z3_theory": "arithmetic",
          "warnings": []
        }
      ],
      "z3_translations": [
        {
          "formal_text": "∀i,j: 0 ≤ i < j < size → arr[i] ≥ arr[j]",
          "natural_language": "Array is sorted in non-increasing order",
          "z3_code": "from z3 import *\n\narr = Array('arr', IntSort(), IntSort())\nsize = Int('size')\ns = Solver()\n\ni = Int('i')\nj = Int('j')\ns.add(ForAll([i, j], Implies(And(0 <= i, i < j, j < size), arr[i] >= arr[j])))\n\nprint(s.check())",
          "z3_theory_used": "arrays",
          "translation_success": true,
          "translation_time": 0.0,
          "z3_validation_passed": true,
          "z3_validation_status": "success",
          "validation_error": null,
          "z3_ast": null,
          "tokens": null,
          "custom_functions": null,
          "declared_sorts": null,
          "declared_variables": null,
          "warnings": [],
          "execution_time": 0.0,
          "generated_at": "2025-10-01T19:52:52.868620"
        },
        {
          "formal_text": "arr ≠ NULL",
          "natural_language": "Array pointer is not NULL",
          "z3_code": "from z3 import *\n\narr = Array('arr', IntSort(), IntSort())\ns = Solver()\n\ns.add(arr != None)\n\nprint(s.check())",
          "z3_theory_used": "arrays",
          "translation_success": true,
          "translation_time": 0.0,
          "z3_validation_passed": true,
          "z3_validation_status": "success",
          "validation_error": null,
          "z3_ast": null,
          "tokens": null,
          "custom_functions": null,
          "declared_sorts": null,
          "declared_variables": null,
          "warnings": [],
          "execution_time": 0.0,
          "generated_at": "2025-10-01T19:52:52.868620"
        },
        {
          "formal_text": "size ≥ 0",
          "natural_language": "Size of array is non-negative",
          "z3_code": "from z3 import *\n\nsize = Int('size')\ns = Solver()\n\ns.add(size >= 0)\n\nprint(s.check())",
          "z3_theory_used": "arithmetic",
          "translation_success": true,
          "translation_time": 0.0,
          "z3_validation_passed": true,
          "z3_validation_status": "success",
          "validation_error": null,
          "z3_ast": null,
          "tokens": null,
          "custom_functions": null,
          "declared_sorts": null,
          "declared_variables": null,
          "warnings": [],
          "execution_time": 0.0,
          "generated_at": "2025-10-01T19:52:52.868620"
        }
      ],
      "postcondition_count": 3,
      "z3_success_count": 3,
      "z3_validated_count": 3,
      "average_quality_score": 0.9686666666666666,
      "average_robustness_score": 0.9666666666666667,
      "edge_case_coverage_score": 1.6666666666666667,
      "mathematical_validity_rate": 0.3333333333333333,
      "processing_time": 0.0,
      "errors": []
    }
  ],
  "total_postconditions": 3,
  "total_z3_translations": 3,
  "successful_z3_translations": 3,
  "validated_z3_translations": 3,
  "codebase_path": null,
  "generated_at": "2025-10-01T19:52:12.154608",
  "total_processing_time": 40.721386,
  "errors": [],
  "warnings": [
    "Average quality score across all functions: 0.97",
    "Average robustness score: 0.97",
    "Average edge cases per postcondition: 1.7",
    "Mathematical validity rate: 33.3%"
  ]
}